{"version":3,"sources":["redux/contacts/contacts-actions.js","redux/contacts/contacts-operation.js","redux/contacts/contacts-selectors.js","redux/contacts/contacts-reduсer.js","components/ContactForm/ContactForm.js","components/ContactsList/ContactsList.js","components/Filter/Filter.js","App.js","redux/store.js","reportWebVitals.js","index.js"],"names":["featchContactRequest","createAction","featchContactSuccess","featchContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","axios","defaults","baseURL","name","number","dispatch","contact","post","then","data","catch","error","contactId","delete","get","getFilter","state","contacts","filter","getAllContacts","items","getLoading","loading","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","includes","createReducer","_","payload","action","id","combineReducers","Form","nameInputId","shortid","generate","handleChange","event","currentTarget","value","setState","handleSubmit","props","onSubmit","preventDefault","find","alert","reset","this","htmlFor","type","onChange","pattern","title","required","Component","connect","contactsSelectors","contactsOperation","onDeleteContacts","map","onClick","e","target","App","fetchContacts","isLoadingcontacts","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactsReducer","devTools","process","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8SAEaA,EAAuBC,YAAa,iCACpCC,EAAuBD,YAAa,iCACpCE,EAAqBF,YAAa,4BAElCG,EAAoBH,YAAa,8BACjCI,EAAoBJ,YAAa,8BACjCK,EAAkBL,YAAa,yBAE/BM,EAAuBN,YAAa,iCACpCO,EAAuBP,YAAa,iCACpCQ,EAAqBR,YAAa,4BAKlCS,EAAeT,YAAa,yBCHzCU,IAAMC,SAASC,QAAU,wBAGzB,I,IA8Be,EAtBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,OAAT,OAAsB,SAAAC,GACrC,IAAMC,EAAU,CACZH,OACAC,UAGJC,EAASZ,KAETO,IAAMO,KAAK,YAAaD,GACnBE,MAAK,gBAAGC,EAAH,EAAGA,KAAH,OAAcJ,EAASX,EAAkBe,OAC9CC,OAAM,SAAAC,GAAK,OAAIN,EAASV,EAAgBgB,SAYlC,EATO,SAAAC,GAAS,OAAI,SAAAP,GAC/BA,EAAST,KAETI,IAAMa,OAAN,oBAA0BD,IACrBJ,MAAK,kBAAMH,EAASR,EAAqBe,OACzCF,OAAM,SAAAC,GAAK,OAAIN,EAASP,EAAmBa,SAIrC,EA9BO,kBAAM,SAAAN,GACxBA,EAAShB,KAETW,IAAMc,IAAI,aACNN,MAAK,gBAAGC,EAAH,EAAGA,KAAH,OAAcJ,EAASd,EAAqBkB,OAChDC,OAAM,SAAAC,GAAK,OAAIN,EAASb,EAAmBmB,S,QCnB9CI,EAAY,SAAAC,GAAK,OAAIA,EAAMC,SAASC,QAEpCC,EAAiB,SAAAH,GAAK,OAAIA,EAAMC,SAASG,OAQhC,GACXC,WAbe,SAAAL,GAAK,OAAIA,EAAMC,SAASK,SAcvCP,YACAI,iBACAI,mBATuBC,YAAe,CAACL,EAAgBJ,IAAY,SAACE,EAAUC,GAC9E,IAAMO,EAAmBP,EAAOQ,cAChC,OAAOT,EAASC,QAAO,SAAAZ,GAAO,OAAIA,EAAQH,KAAKuB,cAAcC,SAASF,U,eCOpEL,EAAQQ,YAAc,IAAD,mBACrBrC,GAAuB,SAACsC,EAAD,YAAKC,WADP,cAElBpC,GAAoB,SAACsB,EAAOe,GAAR,4BAAuBf,GAAvB,CAA8Be,EAAOD,aAFvC,cAGlBjC,GAAuB,SAACmB,EAAOe,GAAR,OACpBf,EAAME,QAAO,SAAAZ,GAAO,OAAIA,EAAQ0B,KAAOD,EAAOD,cAJ/B,IAQrBR,EAAUM,aAAc,GAAD,mBAExBvC,GAAuB,kBAAM,KAFL,cAGxBE,GAAuB,kBAAM,KAHL,cAIxBC,GAAqB,kBAAM,KAJH,cAMxBC,GAAoB,kBAAM,KANF,cAOxBC,GAAoB,kBAAM,KAPF,cAQxBC,GAAkB,kBAAM,KARA,cAUxBC,GAAuB,kBAAM,KAVL,cAWxBC,GAAuB,kBAAM,KAXL,cAYxBC,GAAqB,kBAAM,KAZH,IAevBoB,EAASU,YAAc,GAAD,eACvB7B,GAAe,SAAC8B,EAAGE,GAAJ,OAAeA,EAAOD,YAIpCnB,EAAQiB,YAAc,KAAM,IAGnBK,cAAgB,CAC3Bb,QACAF,SACAI,UACAX,U,OC1CEuB,E,4MAMFlB,MAAQ,CACJb,KAAM,GACNC,OAAQ,I,EAGZ+B,YAAcC,IAAQC,W,EAEtBC,aAAe,SAAAC,GACf,MAAwBA,EAAMC,cAAtBrC,EAAR,EAAQA,KAAMsC,EAAd,EAAcA,MAId,EAAKC,SAAL,eAAgBvC,EAAOsC,K,EAGvBE,aAAe,SAAAJ,GACX,MAA+B,EAAKK,MAA5B3B,EAAR,EAAQA,SAAU4B,EAAlB,EAAkBA,SAClB,EAAyB,EAAK7B,MAAtBb,EAAR,EAAQA,KAAMC,EAAd,EAAcA,OAEdmC,EAAMO,iBAEN7B,EAAS8B,MAAK,SAACzC,GAAD,OAAaA,EAAQH,OAASA,KAC5C6C,MAAM,eAAD,OAAgB7C,EAAhB,4BACLc,EAAS8B,MAAK,SAACzC,GAAD,OAAaA,EAAQF,SAAWA,KAC9C4C,MAAM,eAAD,OAAgB5C,EAAhB,4BACLyC,EAAS,EAAK7B,OAEd,EAAKiC,S,EAITA,MAAQ,WACJ,EAAKP,SAAS,CAAEvC,KAAM,GAAIC,OAAQ,M,4CAGtC,WACI,OACI,uBAAMyC,SAAUK,KAAKP,aAArB,UACJ,wBAAOQ,QAASD,KAAKf,YAArB,iBAGF,uBACEiB,KAAK,OACLX,MAAOS,KAAKlC,MAAMb,KAAMkD,SAAUH,KAAKZ,aACvCnC,KAAK,OACL6B,GAAIkB,KAAKf,YACTmB,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,OAIR,2CAEE,uBACEJ,KAAK,MAELjD,KAAK,SACLsC,MAAOS,KAAKlC,MAAMZ,OAClBiD,SAAUH,KAAKZ,aACzBgB,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,OAGF,wBAAQJ,KAAK,SAAb,gC,GAvEWK,aAuFJC,eAVS,SAAC1C,GAAD,MAAY,CAClCC,SAAU0C,EAAkBxC,eAAeH,OAGlB,SAAAX,GAAQ,MAAK,CACpCwC,SAAU,SAAC1C,EAAMC,GACb,OAAOC,EAASuD,EAA6BzD,EAAMC,QAI5CsD,CAA6CxB,GC7D7CwB,eATS,SAAC1C,GAAD,MAAY,CAChCC,SAAU0C,EAAkBpC,mBAAmBP,OAGxB,SAAAX,GAAQ,MAAK,CACxCwD,iBAAkB,SAAC7B,GAAD,OAAQ3B,EAASuD,EAAgC5B,QAIpD0B,EA5BM,SAAC,GAAD,IAAGzC,EAAH,EAAGA,SAAU4C,EAAb,EAAaA,iBAAb,OAEjB,6BAAK5C,EAAS6C,KAAI,gBAAG9B,EAAH,EAAGA,GAAI7B,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAAb,OACd,+BACI,8BAAID,EAAJ,IAAWC,KACX,wBAAQ2D,QAAS,kBAAMF,EAAiB7B,IAAxC,sBAFKA,WCmBF0B,eATS,SAAC1C,GAAD,MAAY,CACpCyB,MAAOkB,EAAkB5C,UAAUC,OAGR,SAAAX,GAAQ,MAAK,CACpCgD,SAAU,SAACW,GAAD,OAAO3D,EAASN,EAAaiE,EAAEC,OAAOxB,YAIrCiB,EAzBA,SAAC,GAAD,IAAEjB,EAAF,EAAEA,MAAOY,EAAT,EAASA,SAAT,OACX,0DACyB,uBACrB,uBAAOD,KAAK,OACRX,MAAOA,EACPY,SAAUA,UCAhBa,E,4MAEJlD,MAAQ,G,uDAIR,WACEkC,KAAKN,MAAMuB,kB,oBAGf,WAGI,OACE,gCACE,2CACA,cAAC,EAAD,IAEA,0CACA,cAAC,EAAD,IACCjB,KAAKN,MAAMwB,mBAAqB,4CAEjC,cAAC,EAAD,W,GAtBUX,aAsCHC,eARS,SAAA1C,GAAK,MAAK,CAChCoD,kBAAmBT,EAAkBtC,WAAWL,OAGvB,SAAAX,GAAQ,MAAK,CACtC8D,cAAe,kBAAO9D,EAASuD,SAGlBF,CAA6CQ,G,wBC1BtDG,GAAU,sBACTC,YAAqB,CAExBC,kBAAmB,CACXC,eAAgB,CAACC,IAAOC,IAAWC,IAAOC,IAASC,IAAOC,SAJtD,CAQhBC,MAiBeC,GAZDC,YAAe,CACzBC,QAAS,CACLjE,SAAUkE,GAGdd,cACAe,UAAUC,IC7BCC,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhF,MAAK,YAAkD,IAA/CiF,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCEdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUhB,MAAQA,GAAlB,SAGE,cAAC,EAAD,QAIJiB,SAASC,eAAe,SAO1BZ,O","file":"static/js/main.9a978d7d.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const featchContactRequest = createAction('contacts/featchContactRequest');\r\nexport const featchContactSuccess = createAction('contacts/featchContactSuccess');\r\nexport const featchContactError = createAction('todos/featchContactError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('todos/addContactError');\r\n\r\nexport const deleteContactRequest = createAction('contacts/deleteContactRequest');\r\nexport const deleteContactSuccess = createAction('contacts/deleteContactSuccess');\r\nexport const deleteContactError = createAction('todos/deleteContactError');\r\n\r\n\r\n\r\n\r\nexport const changeFilter = createAction('contacts/changeFilter');\r\n\r\n\r\n\r\n\r\n// export default {\r\n//     addContactRequest,\r\n//     addContactSuccess,\r\n//     addContactError,\r\n//     addContact,\r\n//     deleteContact,\r\n//     changeFilter\r\n// };","import axios from 'axios';\r\nimport {\r\n    addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n    deleteContactRequest,\r\n    deleteContactSuccess,\r\n    deleteContactError,\r\n    featchContactRequest,\r\n    featchContactSuccess,\r\n    featchContactError\r\n} from './contacts-actions';\r\n\r\n\r\naxios.defaults.baseURL = 'http://localhost:4040';\r\n\r\n\r\nconst fetchContacts = () => dispatch => {\r\n    dispatch(featchContactRequest());\r\n\r\n    axios.get('/contacts')\r\n       .then(({ data }) => dispatch(featchContactSuccess(data)))\r\n        .catch(error => dispatch(featchContactError(error)));\r\n}\r\n\r\nconst addContact = ({ name, number }) => dispatch => {\r\n    const contact = {\r\n        name,\r\n        number\r\n    }\r\n\r\n    dispatch(addContactRequest());\r\n\r\n    axios.post('/contacts', contact)\r\n        .then(({ data }) => dispatch(addContactSuccess(data)))\r\n        .catch(error => dispatch(addContactError(error)));\r\n};\r\n\r\nconst deleteContact = contactId => dispatch => {\r\n    dispatch(deleteContactRequest());\r\n\r\n    axios.delete(`/contacts/${contactId}`)\r\n        .then(() => dispatch(deleteContactSuccess(contactId)))\r\n        .catch(error => dispatch(deleteContactError(error)));\r\n\r\n}\r\n\r\nexport default {\r\n    addContact,\r\n    deleteContact,\r\n    fetchContacts\r\n\r\n}\r\n","import { createSelector } from \"@reduxjs/toolkit\";\r\nconst getLoading = state => state.contacts.loading;\r\n\r\nconst getFilter = state => state.contacts.filter;\r\n\r\nconst getAllContacts = state => state.contacts.items;\r\n\r\n\r\nconst getVisibleContacts = createSelector([getAllContacts, getFilter], (contacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n    return contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter))\r\n});\r\n\r\nexport default {\r\n    getLoading,\r\n    getFilter,\r\n    getAllContacts,\r\n    getVisibleContacts,\r\n    \r\n\r\n};\r\n\r\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n    addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n    deleteContactRequest,\r\n    deleteContactError,\r\n    deleteContactSuccess,\r\n    changeFilter,\r\n    featchContactRequest,\r\n    featchContactSuccess,\r\n    featchContactError\r\n} from './contacts-actions';\r\n\r\n\r\n\r\nconst items = createReducer([],\r\n    {[featchContactSuccess]: (_, {payload}) => payload,\r\n        [addContactSuccess]: (state, action) => [...state, action.payload],\r\n        [deleteContactSuccess]: (state, action) =>\r\n            state.filter(contact => contact.id !== action.payload),\r\n    }\r\n);\r\n\r\nconst loading = createReducer(false, {\r\n\r\n    [featchContactRequest]: () => true,\r\n    [featchContactSuccess]: () => false,\r\n    [featchContactError]: () => false,\r\n\r\n    [addContactRequest]: () => true,\r\n    [addContactSuccess]: () => false,\r\n    [addContactError]: () => false,\r\n\r\n    [deleteContactRequest]: () => true,\r\n    [deleteContactSuccess]: () => false,\r\n    [deleteContactError]: () => false,\r\n});\r\n\r\nconst filter = createReducer('', {\r\n    [changeFilter]: (_, action) => action.payload,\r\n\r\n})\r\n\r\nconst error = createReducer(null, {});\r\n\r\n\r\nexport default combineReducers({\r\n    items,\r\n    filter,\r\n    loading,\r\n    error\r\n});","import React, { Component } from \"react\";\r\nimport shortid from \"shortid\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from 'react-redux';\r\nimport { contactsOperation, contactsSelectors } from '../../redux/contacts'\r\n\r\n\r\n\r\n\r\n\r\nclass Form extends Component {\r\n\r\n    static propTypes = {\r\n    onSubmit: PropTypes.func.isRequired\r\n  }\r\n\r\n    state = {\r\n        name: '',\r\n        number: ''\r\n    };\r\n\r\n    nameInputId = shortid.generate();\r\n\r\n    handleChange = event => {\r\n    const { name, value } = event.currentTarget;\r\n    // console.log(event.currentTarget);\r\n    // console.log(event.currentTarget.name);\r\n    // console.log(event.currentTarget.value);\r\n    this.setState({[name]: value});\r\n    };\r\n\r\n    handleSubmit = event => {\r\n        const { contacts, onSubmit } = this.props;\r\n        const { name, number } = this.state;\r\n        \r\n        event.preventDefault();\r\n        // console.log(this.state);\r\n        contacts.find((contact) => contact.name === name)\r\n      ? alert(`This person ${name} is already in contacts`)\r\n      : contacts.find((contact) => contact.number === number)\r\n      ? alert(`This number ${number} is already in contacts`)\r\n      : onSubmit(this.state);\r\n        // this.props.onSubmit(this.state);\r\n        this.reset();\r\n\r\n    };\r\n\r\n    reset = () => {\r\n        this.setState({ name: '', number: '' });\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit}>\r\n        <label htmlFor={this.nameInputId}>\r\n          Name\r\n        \r\n      <input\r\n        type=\"text\"\r\n        value={this.state.name} onChange={this.handleChange}\r\n        name=\"name\"\r\n        id={this.nameInputId}\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n        \r\n        />\r\n        </label>\r\n        <label>\r\n          Number\r\n          <input\r\n            type=\"tel\"\r\n            \r\n            name=\"number\"\r\n            value={this.state.number}\r\n            onChange={this.handleChange}\r\n  pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n  title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n  required\r\n/>\r\n        </label>\r\n        <button type=\"submit\">Add contact</button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: contactsSelectors.getAllContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onSubmit: (name, number) =>{\r\n        return dispatch(contactsOperation.addContact(name, number))\r\n    },\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\r\n\r\n","import React from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n// import contactsOperation from '../../redux/contacts/contacts-operation';\r\n// import contactsSelectors from \"../../redux/contacts/contacts-selectors\";\r\n\r\nimport { contactsOperation, contactsSelectors } from \"../../redux/contacts\";\r\n\r\nconst ContactsList = ({ contacts, onDeleteContacts }) => (\r\n    \r\n    <ul>{contacts.map(({ id, name, number }) => (\r\n        <li key={id}>\r\n            <p>{name}:{number}</p>\r\n            <button onClick={() => onDeleteContacts(id)}>Delete</button>\r\n        </li>\r\n    ))}\r\n            \r\n    </ul>\r\n);\r\n\r\nContactsList.propTypes = {\r\n    contacts: PropTypes.array.isRequired,\r\n    onDeleteContacts: PropTypes.func.isRequired\r\n}\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n    contacts: contactsSelectors.getVisibleContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch =>( {\r\nonDeleteContacts: (id) => dispatch(contactsOperation.deleteContact(id)),\r\n})\r\n \r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps )(ContactsList);","import React from \"react\";\r\nimport PropTypes from \"prop-types\"\r\nimport { connect } from \"react-redux\";\r\nimport { contactsSelectors, changeFilter } from \"../../redux/contacts\";\r\n\r\nconst Filter = ({value, onChange}) => (\r\n    <label>\r\n        Find contact by name <br />\r\n        <input type=\"text\"\r\n            value={value}\r\n            onChange={onChange}\r\n        />\r\n    </label>\r\n);\r\n\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\nvalue: contactsSelectors.getFilter(state),\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onChange: (e) => dispatch(changeFilter(e.target.value)),\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","// import './App.css';\nimport { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Form from \"./components/ContactForm\";\nimport ContactsList from \"./components/ContactsList\";\nimport Filter from \"./components/Filter\";\nimport { contactsOperation, contactsSelectors } from './redux/contacts'\n\n\n\nclass App extends Component {\n\n  state = {\n    \n  };\n\n  componentDidMount() {\n    this.props.fetchContacts();\n}\n\nrender() {\n    \n\n    return (\n      <div>\n        <h1>Phonebook</h1>\n        <Form />\n      \n        <h2>Contacts</h2>\n        <Filter />\n        {this.props.isLoadingcontacts && <h2>Loading...</h2>}\n        \n        <ContactsList />\n        \n      </div>\n\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  isLoadingcontacts: contactsSelectors.getLoading(state),\n})\n\nconst mapDispatchToProps = dispatch => ({\n  fetchContacts: () =>  dispatch(contactsOperation.fetchContacts())\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n    // persistStore,\r\n    // persistReducer,\r\n    FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER\r\n} from 'redux-persist';\r\n// import storage from 'redux-persist/lib/storage' // defaults to localStorage for web\r\nimport {contactsReducer }from './contacts';\r\n\r\n// const contactsPersistConfig = {\r\n//     key: 'contacts',\r\n//     storage,\r\n//     blacklist: [\"filter\"],\r\n// };\r\n\r\n\r\nconst middleware = [\r\n    ...getDefaultMiddleware({\r\n         \r\n    serializableCheck: {\r\n            ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n        },\r\n    \r\n    }),\r\nlogger\r\n];\r\n\r\n\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        contacts: contactsReducer,\r\n        // contacts: persistReducer(contactsPersistConfig, contactsReducer)\r\n    },\r\n    middleware,\r\n    devTools: process.env.NODE_ENV === 'development',\r\n\r\n});\r\n\r\n// const persistor = persistStore(store)\r\n\r\nexport default store;\r\n// export default {store, persistor};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './redux/store';\n// import { PersistGate } from 'redux-persist/integration/react';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store= {store}>\n  {/* <PersistGate loading = {null} persistor = {store.persistor}> */}\n    \n      <App />\n      {/* </PersistGate> */}\n </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}